<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jocomi.jcm.admin.model.mapper.AdminMapper">

	<!-- STATUS가 'Y' 또는 'A'인 회원 수 계산 -->
	<select id="countMembersWithStatus" resultType="int">
		SELECT COUNT(*)
		FROM MEMBER
		WHERE STATUS IN ('Y', 'A')
	</select>

	<!-- PAY_STATUS가 'Y'인 총 수익 계산 -->
	<select id="calculateTotalEarnings" resultType="int">
		SELECT
		COALESCE(SUM(PAY_PRICE), 0)
		FROM PAYMENT
		WHERE PAY_STATUS = 'Y'
	</select>

	<!-- PAY_STATUS가 'Y'인 구매자 수 계산 -->
	<select id="calculateTotalConsumers" resultType="int">
		SELECT
		COUNT(DISTINCT MEMBER_ID)
		FROM PAYMENT
		WHERE PAY_STATUS = 'Y'
	</select>

	<!-- 월별 수익 계산 -->
	<select id="getMonthlyEarnings" resultType="map">
		SELECT
		TO_CHAR(PAY_TIME, 'YYYY-MM') AS month,
		COALESCE(SUM(PAY_PRICE), 0) AS
		earnings
		FROM PAYMENT
		WHERE PAY_STATUS = 'Y'
		GROUP BY TO_CHAR(PAY_TIME,
		'YYYY-MM')
		ORDER BY month
	</select>

	<!-- 월별 가입 고객 조회 -->
	<select id="getMonthlyMembers" resultType="map">
		SELECT
		TO_CHAR(MEMBER_DATE, 'YYYY-MM') AS MONTH,
		COUNT(*) AS MEMBER_COUNT
		FROM
		MEMBER
		WHERE STATUS IN ('Y', 'A')
		GROUP BY TO_CHAR(MEMBER_DATE,
		'YYYY-MM')
		ORDER BY MONTH
	</select>

	<!-- 모든 회원 조회 -->
	<select id="getAllMembers"
		resultType="com.jocomi.jcm.model.vo.Member">
		SELECT MEMBER_ID,
		MEMBER_PWD,
		MEMBER_NAME,
		EMAIL,
		PHONE,
		BIRTH,
		ADDRESS,
		STATUS,
		P_IMG
		FROM MEMBER
	</select>

	<!-- Subscribe 페이지 회원 조회 -->
	<select id="getSubscribeDistribution" resultType="map">
		SELECT
		COUNT(*)
		AS TOTAL_USERS,
		COUNT(CASE
		WHEN m.MEMBER_ID NOT IN (
		SELECT MEMBER_ID
		FROM PAYMENT
		WHERE PAY_STATUS = 'Y'
		) THEN 1
		ELSE NULL
		END) AS
		GENERAL_USERS,
		COUNT(DISTINCT CASE
		WHEN p.PAY_STATUS = 'Y' THEN
		m.MEMBER_ID
		ELSE NULL
		END) AS SUBSCRIBED_USERS
		FROM MEMBER m
		LEFT JOIN
		PAYMENT p
		ON m.MEMBER_ID = p.MEMBER_ID
		WHERE m.STATUS IN ('Y', 'A')
	</select>

	<!-- 일반 회원 쿼리 -->
	<select id="getGeneralUsers" resultType="int">
		SELECT COUNT(*)
		FROM MEMBER m
		WHERE m.STATUS IN ('Y', 'A')
		AND NOT EXISTS (
		SELECT 1
		FROM PAYMENT p
		WHERE p.MEMBER_ID = m.MEMBER_ID
		AND p.PAY_STATUS = 'Y'
		)
	</select>


	<!-- 특정 회원 정보 수정 -->
	<update id="updateMemberInfo"
		parameterType="com.jocomi.jcm.model.vo.Member">
		UPDATE MEMBER
		SET MEMBER_NAME = #{memberName},
		EMAIL =
		#{email},
		PHONE = #{phone},
		ADDRESS = #{address},
		STATUS = #{status}
		WHERE MEMBER_ID = #{memberId}
	</update>


	<!-- 특정 회원 상태 변경 -->
	<update id="updateMemberStatus" parameterType="map">
		UPDATE MEMBER
		SET
		STATUS = #{status}
		WHERE MEMBER_ID = #{memberId}
	</update>


	<!-- VIP 및 일반 회원 분포 데이터 계산 -->
	<select id="calculateUserVIPDistribution" resultType="map">
		SELECT
		CAST(NVL(VIP_SUM.VIP1, 0) AS NUMBER(10)) AS VIP1,
		CAST(NVL(VIP_SUM.VIP2, 0) AS NUMBER(10)) AS VIP2,
		CAST(NVL(VIP_SUM.VIP3, 0) AS NUMBER(10)) AS VIP3,
		CAST(NVL(GENERAL_SUM.GENERAL_COUNT, 0) AS NUMBER(10)) AS NOMAL
		FROM (
		SELECT
		SUM(CASE WHEN PAY_PRODUCT = 'VIP1' THEN 1 ELSE 0 END) AS VIP1,
		SUM(CASE WHEN PAY_PRODUCT = 'VIP2' THEN 1 ELSE 0 END) AS VIP2,
		SUM(CASE WHEN PAY_PRODUCT = 'VIP3' THEN 1 ELSE 0 END) AS VIP3
		FROM
		PAYMENT
		WHERE PAY_STATUS = 'Y'
		) VIP_SUM
		CROSS JOIN (
		SELECT
		COUNT(*) AS
		GENERAL_COUNT
		FROM MEMBER
		WHERE MEMBER_ID NOT IN (
		SELECT DISTINCT
		MEMBER_ID
		FROM PAYMENT
		)
		) GENERAL_SUM
	</select>

</mapper>
